<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzu.dao.TransNodeMapper">
  <resultMap id="BaseResultMap" type="com.zzu.bean.TransNode">
    <id column="ID" jdbcType="CHAR" property="id" />
    <result column="NodeName" jdbcType="VARCHAR" property="nodename" />
    <result column="NodeType" jdbcType="INTEGER" property="nodetype" />
    <result column="RegionCode" jdbcType="VARCHAR" property="regioncode" />
    <result column="TelCode" jdbcType="VARCHAR" property="telcode" />
    <result column="x" jdbcType="REAL" property="x" />
    <result column="y" jdbcType="REAL" property="y" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, NodeName, NodeType, RegionCode, TelCode, x, y
  </sql>
  <select id="selectByExample" parameterType="com.zzu.bean.TransNodeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from transnode
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from transnode
    where ID = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from transnode
    where ID = #{id,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.zzu.bean.TransNodeExample">
    delete from transnode
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zzu.bean.TransNode">
    insert into transnode (ID, NodeName, NodeType, 
      RegionCode, TelCode, x, 
      y)
    values (#{id,jdbcType=CHAR}, #{nodename,jdbcType=VARCHAR}, #{nodetype,jdbcType=INTEGER}, 
      #{regioncode,jdbcType=VARCHAR}, #{telcode,jdbcType=VARCHAR}, #{x,jdbcType=REAL}, 
      #{y,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="com.zzu.bean.TransNode">
    insert into transnode
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="nodename != null">
        NodeName,
      </if>
      <if test="nodetype != null">
        NodeType,
      </if>
      <if test="regioncode != null">
        RegionCode,
      </if>
      <if test="telcode != null">
        TelCode,
      </if>
      <if test="x != null">
        x,
      </if>
      <if test="y != null">
        y,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=CHAR},
      </if>
      <if test="nodename != null">
        #{nodename,jdbcType=VARCHAR},
      </if>
      <if test="nodetype != null">
        #{nodetype,jdbcType=INTEGER},
      </if>
      <if test="regioncode != null">
        #{regioncode,jdbcType=VARCHAR},
      </if>
      <if test="telcode != null">
        #{telcode,jdbcType=VARCHAR},
      </if>
      <if test="x != null">
        #{x,jdbcType=REAL},
      </if>
      <if test="y != null">
        #{y,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zzu.bean.TransNodeExample" resultType="java.lang.Long">
    select count(*) from transnode
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update transnode
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=CHAR},
      </if>
      <if test="record.nodename != null">
        NodeName = #{record.nodename,jdbcType=VARCHAR},
      </if>
      <if test="record.nodetype != null">
        NodeType = #{record.nodetype,jdbcType=INTEGER},
      </if>
      <if test="record.regioncode != null">
        RegionCode = #{record.regioncode,jdbcType=VARCHAR},
      </if>
      <if test="record.telcode != null">
        TelCode = #{record.telcode,jdbcType=VARCHAR},
      </if>
      <if test="record.x != null">
        x = #{record.x,jdbcType=REAL},
      </if>
      <if test="record.y != null">
        y = #{record.y,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update transnode
    set ID = #{record.id,jdbcType=CHAR},
      NodeName = #{record.nodename,jdbcType=VARCHAR},
      NodeType = #{record.nodetype,jdbcType=INTEGER},
      RegionCode = #{record.regioncode,jdbcType=VARCHAR},
      TelCode = #{record.telcode,jdbcType=VARCHAR},
      x = #{record.x,jdbcType=REAL},
      y = #{record.y,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzu.bean.TransNode">
    update transnode
    <set>
      <if test="nodename != null">
        NodeName = #{nodename,jdbcType=VARCHAR},
      </if>
      <if test="nodetype != null">
        NodeType = #{nodetype,jdbcType=INTEGER},
      </if>
      <if test="regioncode != null">
        RegionCode = #{regioncode,jdbcType=VARCHAR},
      </if>
      <if test="telcode != null">
        TelCode = #{telcode,jdbcType=VARCHAR},
      </if>
      <if test="x != null">
        x = #{x,jdbcType=REAL},
      </if>
      <if test="y != null">
        y = #{y,jdbcType=REAL},
      </if>
    </set>
    where ID = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzu.bean.TransNode">
    update transnode
    set NodeName = #{nodename,jdbcType=VARCHAR},
      NodeType = #{nodetype,jdbcType=INTEGER},
      RegionCode = #{regioncode,jdbcType=VARCHAR},
      TelCode = #{telcode,jdbcType=VARCHAR},
      x = #{x,jdbcType=REAL},
      y = #{y,jdbcType=REAL}
    where ID = #{id,jdbcType=CHAR}
  </update>
</mapper>